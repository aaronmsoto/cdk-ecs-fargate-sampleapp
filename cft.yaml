Resources:
  MyAppVpc4A7F91FE:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/Resource
  MyAppVpcPublicSubnet1Subnet66F0954F:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/18
      VpcId:
        Ref: MyAppVpc4A7F91FE
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PublicSubnet1
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet1/Subnet
  MyAppVpcPublicSubnet1RouteTable1FE4E5C5:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyAppVpc4A7F91FE
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet1/RouteTable
  MyAppVpcPublicSubnet1RouteTableAssociation7B706CE8:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyAppVpcPublicSubnet1RouteTable1FE4E5C5
      SubnetId:
        Ref: MyAppVpcPublicSubnet1Subnet66F0954F
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet1/RouteTableAssociation
  MyAppVpcPublicSubnet1DefaultRoute4C879FD1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyAppVpcPublicSubnet1RouteTable1FE4E5C5
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyAppVpcIGW87384845
    DependsOn:
      - MyAppVpcVPCGW07851A58
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet1/DefaultRoute
  MyAppVpcPublicSubnet1EIPC0FAC117:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet1/EIP
  MyAppVpcPublicSubnet1NATGatewayE2C00866:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyAppVpcPublicSubnet1EIPC0FAC117
          - AllocationId
      SubnetId:
        Ref: MyAppVpcPublicSubnet1Subnet66F0954F
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PublicSubnet1
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet1/NATGateway
  MyAppVpcPublicSubnet2Subnet5A9A3608:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.64.0/18
      VpcId:
        Ref: MyAppVpc4A7F91FE
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PublicSubnet2
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet2/Subnet
  MyAppVpcPublicSubnet2RouteTable9CDD668A:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyAppVpc4A7F91FE
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet2/RouteTable
  MyAppVpcPublicSubnet2RouteTableAssociationF9784E74:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyAppVpcPublicSubnet2RouteTable9CDD668A
      SubnetId:
        Ref: MyAppVpcPublicSubnet2Subnet5A9A3608
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet2/RouteTableAssociation
  MyAppVpcPublicSubnet2DefaultRoute9388166F:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyAppVpcPublicSubnet2RouteTable9CDD668A
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: MyAppVpcIGW87384845
    DependsOn:
      - MyAppVpcVPCGW07851A58
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet2/DefaultRoute
  MyAppVpcPublicSubnet2EIP11A563B7:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet2/EIP
  MyAppVpcPublicSubnet2NATGateway28555C67:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - MyAppVpcPublicSubnet2EIP11A563B7
          - AllocationId
      SubnetId:
        Ref: MyAppVpcPublicSubnet2Subnet5A9A3608
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PublicSubnet2
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PublicSubnet2/NATGateway
  MyAppVpcPrivateSubnet1SubnetEAFCFB9E:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.128.0/18
      VpcId:
        Ref: MyAppVpc4A7F91FE
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PrivateSubnet1
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PrivateSubnet1/Subnet
  MyAppVpcPrivateSubnet1RouteTable56C1AB10:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyAppVpc4A7F91FE
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PrivateSubnet1
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PrivateSubnet1/RouteTable
  MyAppVpcPrivateSubnet1RouteTableAssociation24CBE7B2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyAppVpcPrivateSubnet1RouteTable56C1AB10
      SubnetId:
        Ref: MyAppVpcPrivateSubnet1SubnetEAFCFB9E
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PrivateSubnet1/RouteTableAssociation
  MyAppVpcPrivateSubnet1DefaultRouteDA307DA7:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyAppVpcPrivateSubnet1RouteTable56C1AB10
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyAppVpcPublicSubnet1NATGatewayE2C00866
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PrivateSubnet1/DefaultRoute
  MyAppVpcPrivateSubnet2Subnet3DD2D8E6:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.192.0/18
      VpcId:
        Ref: MyAppVpc4A7F91FE
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PrivateSubnet2
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PrivateSubnet2/Subnet
  MyAppVpcPrivateSubnet2RouteTableBB08FB9B:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: MyAppVpc4A7F91FE
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc/PrivateSubnet2
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PrivateSubnet2/RouteTable
  MyAppVpcPrivateSubnet2RouteTableAssociationB1200E26:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: MyAppVpcPrivateSubnet2RouteTableBB08FB9B
      SubnetId:
        Ref: MyAppVpcPrivateSubnet2Subnet3DD2D8E6
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PrivateSubnet2/RouteTableAssociation
  MyAppVpcPrivateSubnet2DefaultRoute14A726E7:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: MyAppVpcPrivateSubnet2RouteTableBB08FB9B
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: MyAppVpcPublicSubnet2NATGateway28555C67
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/PrivateSubnet2/DefaultRoute
  MyAppVpcIGW87384845:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: AppStack/MyAppVpc
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/IGW
  MyAppVpcVPCGW07851A58:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: MyAppVpc4A7F91FE
      InternetGatewayId:
        Ref: MyAppVpcIGW87384845
    Metadata:
      aws:cdk:path: AppStack/MyAppVpc/VPCGW
  MyAppEcsCluster8D8AB3E3:
    Type: AWS::ECS::Cluster
    Metadata:
      aws:cdk:path: AppStack/MyAppEcsCluster/Resource
  MyAppFargateServiceLB778FEDA1:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - Fn::GetAtt:
            - MyAppFargateServiceLBSecurityGroup1F95D3E3
            - GroupId
      Subnets:
        - Ref: MyAppVpcPublicSubnet1Subnet66F0954F
        - Ref: MyAppVpcPublicSubnet2Subnet5A9A3608
      Type: application
    DependsOn:
      - MyAppVpcPublicSubnet1DefaultRoute4C879FD1
      - MyAppVpcPublicSubnet2DefaultRoute9388166F
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/LB/Resource
  MyAppFargateServiceLBSecurityGroup1F95D3E3:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Automatically created Security Group for ELB AppStackMyAppFargateServiceLB53A5D3DD
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          Description: Allow from anyone on port 80
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      VpcId:
        Ref: MyAppVpc4A7F91FE
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/LB/SecurityGroup/Resource
  MyAppFargateServiceLBSecurityGrouptoAppStackMyAppFargateServiceSecurityGroup5B030732802F481F0D:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId:
        Fn::GetAtt:
          - MyAppFargateServiceLBSecurityGroup1F95D3E3
          - GroupId
      IpProtocol: tcp
      Description: Load balancer to target
      DestinationSecurityGroupId:
        Fn::GetAtt:
          - MyAppFargateServiceSecurityGroup07216864
          - GroupId
      FromPort: 80
      ToPort: 80
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/LB/SecurityGroup/to AppStackMyAppFargateServiceSecurityGroup5B030732:80
  MyAppFargateServiceLBPublicListener9673CFAB:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn:
            Ref: MyAppFargateServiceLBPublicListenerECSGroup763B7D8E
          Type: forward
      LoadBalancerArn:
        Ref: MyAppFargateServiceLB778FEDA1
      Port: 80
      Protocol: HTTP
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/LB/PublicListener/Resource
  MyAppFargateServiceLBPublicListenerECSGroup763B7D8E:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: MyAppVpc4A7F91FE
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/LB/PublicListener/ECSGroup/Resource
  MyAppFargateServiceTaskDefTaskRoleDEEFE2FA:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/TaskDef/TaskRole/Resource
  MyAppFargateServiceTaskDef51333734:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: amazon/amazon-ecs-sample
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group:
                Ref: MyAppFargateServiceTaskDefwebLogGroupF0128506
              awslogs-stream-prefix: MyAppFargateService
              awslogs-region:
                Ref: AWS::Region
          Name: web
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
      Cpu: "256"
      ExecutionRoleArn:
        Fn::GetAtt:
          - MyAppFargateServiceTaskDefExecutionRole9E33D6C0
          - Arn
      Family: AppStackMyAppFargateServiceTaskDefDCF776F6
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn:
        Fn::GetAtt:
          - MyAppFargateServiceTaskDefTaskRoleDEEFE2FA
          - Arn
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/TaskDef/Resource
  MyAppFargateServiceTaskDefwebLogGroupF0128506:
    Type: AWS::Logs::LogGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/TaskDef/web/LogGroup/Resource
  MyAppFargateServiceTaskDefExecutionRole9E33D6C0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/TaskDef/ExecutionRole/Resource
  MyAppFargateServiceTaskDefExecutionRoleDefaultPolicy80A81293:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
                - MyAppFargateServiceTaskDefwebLogGroupF0128506
                - Arn
        Version: "2012-10-17"
      PolicyName: MyAppFargateServiceTaskDefExecutionRoleDefaultPolicy80A81293
      Roles:
        - Ref: MyAppFargateServiceTaskDefExecutionRole9E33D6C0
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/TaskDef/ExecutionRole/DefaultPolicy/Resource
  MyAppFargateService33B85C6D:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: MyAppEcsCluster8D8AB3E3
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 3
      EnableECSManagedTags: false
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: web
          ContainerPort: 80
          TargetGroupArn:
            Ref: MyAppFargateServiceLBPublicListenerECSGroup763B7D8E
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::GetAtt:
                - MyAppFargateServiceSecurityGroup07216864
                - GroupId
          Subnets:
            - Ref: MyAppVpcPrivateSubnet1SubnetEAFCFB9E
            - Ref: MyAppVpcPrivateSubnet2Subnet3DD2D8E6
      ServiceName: MyService
      TaskDefinition:
        Ref: MyAppFargateServiceTaskDef51333734
    DependsOn:
      - MyAppFargateServiceLBPublicListenerECSGroup763B7D8E
      - MyAppFargateServiceLBPublicListener9673CFAB
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/Service/Service
  MyAppFargateServiceSecurityGroup07216864:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AppStack/MyAppFargateService/Service/SecurityGroup
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"
      VpcId:
        Ref: MyAppVpc4A7F91FE
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/Service/SecurityGroup/Resource
  MyAppFargateServiceSecurityGroupfromAppStackMyAppFargateServiceLBSecurityGroup6B0B7F828080881D06:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      Description: Load balancer to target
      FromPort: 80
      GroupId:
        Fn::GetAtt:
          - MyAppFargateServiceSecurityGroup07216864
          - GroupId
      SourceSecurityGroupId:
        Fn::GetAtt:
          - MyAppFargateServiceLBSecurityGroup1F95D3E3
          - GroupId
      ToPort: 80
    Metadata:
      aws:cdk:path: AppStack/MyAppFargateService/Service/SecurityGroup/from AppStackMyAppFargateServiceLBSecurityGroup6B0B7F82:80
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Modules: aws-cdk=1.38.0,@aws-cdk/assets=1.38.0,@aws-cdk/aws-applicationautoscaling=1.38.0,@aws-cdk/aws-autoscaling=1.38.0,@aws-cdk/aws-autoscaling-common=1.38.0,@aws-cdk/aws-autoscaling-hooktargets=1.38.0,@aws-cdk/aws-certificatemanager=1.38.0,@aws-cdk/aws-cloudwatch=1.38.0,@aws-cdk/aws-ec2=1.38.0,@aws-cdk/aws-ecr=1.38.0,@aws-cdk/aws-ecr-assets=1.38.0,@aws-cdk/aws-ecs=1.38.0,@aws-cdk/aws-ecs-patterns=1.38.0,@aws-cdk/aws-elasticloadbalancingv2=1.38.0,@aws-cdk/aws-events=1.38.0,@aws-cdk/aws-events-targets=1.38.0,@aws-cdk/aws-iam=1.38.0,@aws-cdk/aws-kms=1.38.0,@aws-cdk/aws-lambda=1.38.0,@aws-cdk/aws-logs=1.38.0,@aws-cdk/aws-route53=1.38.0,@aws-cdk/aws-route53-targets=1.38.0,@aws-cdk/aws-s3=1.38.0,@aws-cdk/aws-s3-assets=1.38.0,@aws-cdk/aws-servicediscovery=1.38.0,@aws-cdk/aws-sns=1.38.0,@aws-cdk/aws-sns-subscriptions=1.38.0,@aws-cdk/aws-sqs=1.38.0,@aws-cdk/aws-ssm=1.38.0,@aws-cdk/cloud-assembly-schema=1.38.0,@aws-cdk/core=1.38.0,@aws-cdk/custom-resources=1.38.0,@aws-cdk/cx-api=1.38.0,@aws-cdk/region-info=1.38.0,jsii-runtime=node.js/v10.20.1
    Condition: CDKMetadataAvailable
Outputs:
  MyAppFargateServiceLoadBalancerDNS339F581E:
    Value:
      Fn::GetAtt:
        - MyAppFargateServiceLB778FEDA1
        - DNSName
  MyAppFargateServiceServiceURLD0FFCB4F:
    Value:
      Fn::Join:
        - ""
        - - http://
          - Fn::GetAtt:
              - MyAppFargateServiceLB778FEDA1
              - DNSName
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-northeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-1
          - Fn::Equals:
              - Ref: AWS::Region
              - ap-southeast-2
          - Fn::Equals:
              - Ref: AWS::Region
              - ca-central-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - cn-northwest-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-central-1
      - Fn::Or:
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-north-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-2
          - Fn::Equals:
              - Ref: AWS::Region
              - eu-west-3
          - Fn::Equals:
              - Ref: AWS::Region
              - me-south-1
          - Fn::Equals:
              - Ref: AWS::Region
              - sa-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-east-2
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-1
          - Fn::Equals:
              - Ref: AWS::Region
              - us-west-2

